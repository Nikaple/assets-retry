{"version":3,"file":"assets-retry.umd.js","sources":["../src/util.ts","../src/url.ts","../src/constants.ts","../src/retry-async.ts","../src/collector.ts","../src/retry-sync.ts","../src/retry-css.ts","../src/assets-retry.ts"],"sourcesContent":["import { scriptTag, linkTag, doc, retryIdentifier } from './constants'\n\nexport const identity = function<T>(x: T): T {\n    return x\n}\nexport const noop = () => {\n    /* noop */\n}\n\nexport const hasOwn = Object.prototype.hasOwnProperty\n/**\n * safely calls a function\n *\n * @template T this\n * @template R ReturnType<func>\n * @param {(this: T, ...callbackArgs: any[]) => R} func\n * @param {T} thisArg\n * @param {*} args\n * @returns {R}\n */\nexport const safeCall = function<T, R>(\n    func: (this: T, ...callbackArgs: any[]) => R,\n    thisArg: T,\n    args: any\n): R {\n    // eslint-disable-next-line\n    if (typeof func !== 'function') {\n        return null as any\n    }\n    return func.call(thisArg, args)\n}\n\n/**\n * replace a substring with new one\n *\n * @param {string} current current string\n * @param {string} oldStr substring to replace\n * @param {string} newStr new string\n * @returns\n */\nexport const stringReplace = function(current: string, oldStr: string, newStr: string) {\n    const idx = current.indexOf(oldStr)\n    if (idx === -1) {\n        return current;\n    }\n    return current.substring(0, idx) + newStr + current.substring(idx + oldStr.length)\n}\n\n/**\n * convert a camelCase string to a dash-separated string.\n *\n * @param {string} str\n * @returns\n */\nexport const toSlug = function(str: string) {\n    return str.replace(/([a-z])([A-Z])/g, (_, $1, $2) => `${$1}-${$2.toLowerCase()}`)\n}\n\n/**\n * set default value for object\n *\n * @param {any} obj object\n * @param {string} key key\n * @param {any} defaultValue default value\n */\nexport const setDefault = function(obj: any, key: string, defaultValue: any) {\n    obj[key] = obj[key] || defaultValue\n}\n\n/**\n * transform an array-like object to array\n *\n * @template T\n * @param {ArrayLike<T>} arrayLike\n * @returns {T[]}\n */\nexport const arrayFrom = function<T>(arrayLike: ArrayLike<T>): T[] {\n    return [].slice.call(arrayLike)\n}\n/**\n * collect all property names from current object to its ancestor\n *\n * @param {any} obj\n * @returns\n */\nexport const collectPropertyNames = function(obj: any) {\n    const getProto = Object.getPrototypeOf\n        ? Object.getPrototypeOf\n        : function(x: any) {\n              return x.__proto__\n          }\n    let keys = Object.keys(obj);\n    while (getProto(obj)) {\n        keys = keys.concat(Object.keys(getProto(obj)))\n        obj = getProto(obj)\n    }\n    return keys.filter(key => key !== 'constructor');\n}\n\n/**\n * @example\n * isFunctionProperty(HTMLScriptElement.prototype, 'src); // false\n * isFunctionProperty(HTMLScriptElement.prototype, 'getAttribute'); // true\n * @param {any} proto\n * @param {string} key\n * @returns\n */\nexport const isFunctionProperty = function(proto: any, key: string) {\n    try {\n        return typeof proto[key] === 'function'\n    } catch (e) {\n        // TypeError: Illegal invocation\n        // when evaluating properties like\n        // HTMLScriptElement.prototype.src\n        return false\n    }\n}\n\n/**\n * on some browsers, calling `document.write` when \n * `document.readyState` is `loading` will clear the whole\n * page, which is not what we wanted.\n *\n * @returns\n */\nexport const supportDocumentWrite = () => {\n    return !(/Edge|MSIE|rv:/i.test(navigator.userAgent))\n}\n\n/**\n * loads a new script element by previous failed script element\n *\n * @param {HTMLScriptElement} $script previous script element\n * @param {string} newSrc new url to try\n */\nexport const loadNextScript = function(\n    $script: HTMLScriptElement,\n    newSrc: string,\n    onload: () => void = noop\n) {\n    // when dealing with failed script tags in html,\n    // use `document.write` to ensure the correctness\n    // of loading order\n    if (doc.readyState === 'loading' && supportDocumentWrite()) {\n        const retryId = randomString()\n        const newHtml = $script.outerHTML\n            // delete previous retry id\n            .replace(/data-retry-id=\"[^\"]+\"/, '')\n            .replace(/src=(?:\"[^\"]+\"|.+)([ >])/, `${retryIdentifier}=${retryId} src=\"${newSrc}\"$1`)\n        doc.write(newHtml)\n        const newScript = doc.querySelector(\n            `script[${retryIdentifier}=\"${retryId}\"]`\n        ) as HTMLScriptElement\n        if (newScript) {\n            newScript.onload = onload\n        }\n        return\n    }\n    const $newScript = doc.createElement(scriptTag)\n    // copy script properties except src:\n    // type, noModule, charset, async, defer,\n    // crossOrigin, text, referrerPolicy, event,\n    // htmlFor, integrity (chrome)\n    Object.keys(HTMLScriptElement.prototype).forEach(function(key: string) {\n        if (key !== 'src' && ($script as any)[key] && typeof ($script as any)[key] !== 'object') {\n            try {\n                ;($newScript as any)[key] = ($script as any)[key]\n            } catch (_) {\n                /* noop */\n            }\n        }\n    })\n    $newScript.src = newSrc\n    $newScript.onload = $script.onload\n    $newScript.onerror = $script.onerror\n    $newScript.setAttribute(retryIdentifier, randomString())\n    // webpack nonce for csp\n    const originalNonce = $script.getAttribute('nonce')\n    if (originalNonce) {\n        $newScript.setAttribute('nonce', originalNonce)\n    }\n    doc.getElementsByTagName('head')[0].appendChild($newScript)\n}\n\n\n/**\n * get rules from styleSheet\n *\n * @param {CSSStyleSheet} styleSheet\n * @returns\n */\nexport const getCssRules = function(styleSheet: CSSStyleSheet) {\n    try {\n        return styleSheet.rules\n    } catch (_) {\n        try {\n            return styleSheet.cssRules\n        } catch (_) {\n            return null\n        }\n    }\n}\n/**\n * test if current browser support CSSRuleList\n *\n * @param {CSSStyleSheet} styleSheet\n * @returns\n */\nexport const supportRules = function(styleSheet: CSSStyleSheet) {\n    const rules = getCssRules(styleSheet)\n    return !!rules\n}\n\n/**\n * loads a new link element by previous failed link element\n *\n * @param {HTMLLinkElement} $link previous link element\n * @param {string} newHref new url to try\n */\nexport const loadNextLink = function($link: HTMLLinkElement, newHref: string, onload: () => void) {\n    const $newLink = doc.createElement(linkTag)\n    // copy link properties except href:\n    // disabled, href, crossOrigin, rel, relList, media, hreflang,\n    // type, as, referrerPolicy, sizes, imageSrcset, imageSizes,\n    // charset, rev, target, sheet, integrity, import (chrome)\n    Object.keys(HTMLLinkElement.prototype).forEach(function(key: string) {\n        if (key !== 'href' && ($link as any)[key] && typeof ($link as any)[key] !== 'object') {\n            try {\n                ;($newLink as any)[key] = ($link as any)[key]\n            } catch (_) {\n                /* noop */\n            }\n        }\n    })\n    $newLink.href = newHref\n    $newLink.onload = onload\n    $newLink.setAttribute(retryIdentifier, randomString())\n    doc.getElementsByTagName('head')[0].appendChild($newLink)\n}\n\nexport const hashTarget = function(element: EventTarget | null) {\n    if (!element) {\n        return 'null'\n    }\n    if (!(element instanceof HTMLElement)) {\n        return 'not_supported'\n    }\n    const nodeName = element.nodeName;\n    const src = (element as any).src;\n    const href = (element as any).href;\n    const dataRetryId = element.getAttribute(retryIdentifier);\n    return [nodeName, src, href, dataRetryId].join(';')\n}\n\nexport const randomString = () => Math.random().toString(36).slice(2)","import { retryCollector, RetryStatistics } from './collector'\nimport { retryTimesProp, failedProp, succeededProp } from './constants'\n\nexport type Domain = string[] | { [x: string]: string }\nexport interface DomainMap {\n    [x: string]: string\n}\n\n/**\n * generate the domain map from user\n * @example\n * generateDomainMap(['a.cdn', 'b.cdn', 'c.cdn']) // {'a.cdn': 'b.cdn', 'b.cdn': 'c.cdn', 'c.cdn': 'a.cdn'}\n *\n * @param {Domain} domains\n * @returns {DomainMap}\n */\nexport const prepareDomainMap = function(domains: Domain): DomainMap {\n    // array\n    if (Array.isArray(domains)) {\n        return domains.reduce(function(domainMap, domain, idx, array) {\n            domainMap[domain] = array[(idx + 1) % array.length]\n            return domainMap\n        }, {} as DomainMap)\n    }\n    // object\n    return domains\n}\n\n/**\n * get path from src\n * @example\n * getUrlPath('https://a.cdn/js/1.js', 'a.cdn'); // '/js/1.js'\n * getUrlPath('https://a.cdn/namespace/js/1.js', 'a.cdn/namespace'); // '/js/1.js'\n * @param {string} src script src\n * @param {string} currentDomain domain name\n * @returns {string}\n */\nexport const getUrlPath = function(src: string, currentDomain: string) {\n    return src.substr(src.indexOf(currentDomain) + currentDomain.length, src.length)\n}\n\n/**\n * find out the domain of current loading script\n *\n * @param {string} src\n * @param {{ [x: string]: string }} domainMap\n * @returns\n */\nexport const getCurrentDomain = function(src: string, domainMap: DomainMap) {\n    return (\n        Object.keys(domainMap)\n            .filter(function(domain) {\n                return src.indexOf(domain) > -1\n            })\n            // sort by length (relevance)\n            .sort((prev, next) => next.length - prev.length)[0]\n    )\n}\n\n/**\n * extract domain from url, and get the\n * corresponding statistic collector\n * @param {string} url\n * @returns\n */\nexport const extractInfoFromUrl = function(\n    url: string,\n    domainMap: DomainMap\n): [string?, RetryStatistics?] {\n    const currentDomain = getCurrentDomain(url, domainMap)\n    if (!currentDomain) {\n        return []\n    }\n    const srcPath = getUrlPath(url, currentDomain)\n    retryCollector[srcPath] = retryCollector[srcPath] || {\n        [retryTimesProp]: 0,\n        [failedProp]: [],\n        [succeededProp]: []\n    }\n    return [currentDomain, retryCollector[srcPath]]\n}\n","export const retryTimesProp = 'retryTimes'\nexport const succeededProp = 'succeeded'\nexport const failedProp = 'failed'\nexport const maxRetryCountProp = 'maxRetryCount'\nexport const onRetryProp = 'onRetry'\nexport const onSuccessProp = 'onSuccess'\nexport const onFailProp = 'onFail'\nexport const domainProp = 'domain'\nexport const innerScriptProp = '_$assetsRetryScript'\nexport const innerOnloadProp = '_$assetsRetryOnload'\nexport const innerOnerrorProp = '_$assetsRetryOnerror'\nexport const scriptTag = 'script'\nexport const linkTag = 'link'\nexport const hookedIdentifier = 'data-assets-retry-hooked'\nexport const retryIdentifier = 'data-retry-id'\nexport const win = window\nexport const doc = window.document\n","import {\n    collectPropertyNames,\n    stringReplace,\n    isFunctionProperty,\n    loadNextScript,\n    safeCall,\n    hasOwn,\n    noop\n} from './util'\n\nimport {\n    retryTimesProp,\n    succeededProp,\n    failedProp,\n    maxRetryCountProp,\n    onRetryProp,\n    domainProp,\n    innerScriptProp,\n    innerOnloadProp,\n    innerOnerrorProp,\n    scriptTag,\n    hookedIdentifier,\n    doc,\n} from './constants'\nimport { retryCollector } from './collector'\nimport { prepareDomainMap, extractInfoFromUrl } from './url'\nimport { InnerAssetsRetryOptions } from './assets-retry'\n\nexport interface HookedScript {\n    [innerScriptProp]: HTMLScriptElement\n    [innerOnerrorProp]: (e: Partial<Event>) => void\n    [x: string]: any\n}\n\n// cache all properties of HTMLScriptElement.prototype\n// (including prototype properties) because it's big (length > 200)\n// otherwise it would be calculated every time when\n// a script request failed.\nlet scriptProperties: string[];\ntry {\n    scriptProperties = collectPropertyNames(HTMLScriptElement.prototype)\n} catch (_) { /* noop */ }\n\n/**\n * create the descriptor of hooked script object,\n * accessing any property on the hooked script object\n * will be delegated to the real HTMLScriptElement\n * except onload/onerror events\n *\n * @param {any} self hookedScript\n * @param {object} opts\n * @returns\n */\nconst getHookedScriptDescriptors = function(self: HookedScript, opts: InnerAssetsRetryOptions) {\n    const maxRetryCount = opts[maxRetryCountProp]\n    const domainMap = prepareDomainMap(opts[domainProp])\n    const onRetry = opts[onRetryProp]\n    return scriptProperties.reduce(function(descriptor, key) {\n        const isFn = isFunctionProperty(HTMLScriptElement.prototype, key)\n        // for function properties,\n        // do not assign getters/setters\n        if (isFn) {\n            descriptor[key] = {\n                value: function() {\n                    return (self[innerScriptProp] as any)[key].apply(\n                        self[innerScriptProp],\n                        arguments\n                    )\n                }\n            }\n        } else {\n            descriptor[key] = {\n                set: function(newVal) {\n                    if (key === 'onerror') {\n                        self[innerOnerrorProp] = newVal\n                        // hook error events,\n                        // forward the original onerror handler\n                        // to the next script element to load\n                        ;(self[innerScriptProp] as any).onerror = function(event: ErrorEvent) {\n                            event.stopPropagation && event.stopPropagation()\n                            const callOriginalOnError = () => safeCall(self[innerOnerrorProp], self[innerScriptProp], event)\n                            const src = self[innerScriptProp].src\n                            const [currentDomain, currentCollector] = extractInfoFromUrl(\n                                src,\n                                domainMap\n                            )\n                            if (!currentDomain || !currentCollector) {\n                                return callOriginalOnError()\n                            }\n                            const newSrc = stringReplace(\n                                src,\n                                currentDomain,\n                                domainMap[currentDomain]\n                            )\n                            const userModifiedSrc = onRetry(newSrc, src, currentCollector)\n                            // if onRetry returns null, do not retry this url\n                            if (userModifiedSrc === null) {\n                                return callOriginalOnError()\n                            }\n                            // eslint-disable-next-line\n                            if (typeof userModifiedSrc !== 'string') {\n                                throw new Error('a string should be returned in `onRetry` function')\n                            }\n                            if (currentCollector[retryTimesProp] <= maxRetryCount) {\n                                loadNextScript(self[innerScriptProp], userModifiedSrc)\n                            } else {\n                                callOriginalOnError()\n                            }\n                        }\n                        return\n                    }\n                    if (key === 'onload') {\n                        self[innerOnloadProp] = newVal\n                        self[innerScriptProp].onload = function(event: Event) {\n                            const src = self[innerScriptProp].src\n                            const [_, currentCollector] = extractInfoFromUrl(src, domainMap)\n                            if (currentCollector) {\n                                if (currentCollector[failedProp].indexOf(src) === -1) {\n                                    currentCollector[succeededProp].push(src)\n                                }\n                            }\n                            if (newVal && !newVal._called) {\n                                newVal._called = true\n                                newVal.call(self[innerScriptProp], event)\n                            }\n                        }\n                        return\n                    }\n                    ;(self[innerScriptProp] as any)[key] = newVal\n                },\n                get() {\n                    return (self[innerScriptProp] as any)[key]\n                }\n            }\n        }\n        return descriptor\n    }, {} as PropertyDescriptorMap)\n}\n\nconst createHookedScript = function(\n    $script: HTMLScriptElement,\n    opts: InnerAssetsRetryOptions\n): HookedScript {\n    $script.setAttribute(hookedIdentifier, 'true')\n    const $hookedScript: HookedScript = {\n        [innerScriptProp]: $script,\n        [innerOnerrorProp]: noop\n    }\n    const descriptors = getHookedScriptDescriptors($hookedScript, opts)\n    Object.defineProperties($hookedScript, descriptors)\n    return $hookedScript\n}\n\n/**\n * hook `document.createElement`\n * @param {InnerAssetsRetryOptions} opts\n */\nconst hookCreateElement = function(opts: InnerAssetsRetryOptions) {\n    const originalCreateElement = doc.createElement\n    ;(doc as any).createElement = function(name: string, options: any): any {\n        if (name === scriptTag) {\n            return createHookedScript((originalCreateElement as any).call(doc, scriptTag), opts)\n        }\n        return originalCreateElement.call(doc, name, options)\n    }\n    doc.createElement.toString = function() {\n        return 'function createElement() { [native code] }'\n    }\n}\n\n/**\n * create a hooked function which hooks every method of target.\n * if a method is hooked and its arguments contains the inner script tag\n * it will be replaced with the value of inner script tag\n *\n * @param {any} target hook target\n */\nconst hookPrototype = function(target: any) {\n    const functionKeys = Object.keys(target).filter(key => isFunctionProperty(target, key))\n    functionKeys.forEach(key => {\n        const originalFunc = target[key]\n        target[key] = function(): any {\n            const args = [].slice.call(arguments).map((item: any) => {\n                if (!item) return item;\n                return hasOwn.call(item, innerScriptProp) ? item[innerScriptProp] : item\n            })\n            return originalFunc.apply(this, args)\n        }\n        // keep original toString\n        if (/^\\w+$/.test(key)) {\n            target[key].toString = new Function(`return 'function ${key}() { [native code] }'`)\n        }\n    })\n}\n/**\n * init asynchronous retrying of script tags\n * @param {InnerAssetsRetryOptions} opts\n * @returns\n */\nexport default function initAsync(opts: InnerAssetsRetryOptions) {\n    hookCreateElement(opts)\n    // eslint-disable-next-line\n    if (typeof Node !== 'undefined') {\n        hookPrototype(Node.prototype)\n    }\n    // eslint-disable-next-line\n    if (typeof Element !== 'undefined') {\n        hookPrototype(Element.prototype)\n    }\n    return retryCollector\n}\n","/** @description data collector */\n\nimport { retryTimesProp, succeededProp, failedProp } from './constants'\n\nexport interface RetryCollector {\n    [x: string]: RetryStatistics\n}\n\nexport interface RetryStatistics {\n    [retryTimesProp]: number\n    [succeededProp]: string[]\n    [failedProp]: string[]\n}\n\n// statistic collector\nexport const retryCollector: RetryCollector = {}\n","import { stringReplace, loadNextScript, loadNextLink, hashTarget, randomString, arrayFrom, getCssRules } from './util'\nimport { InnerAssetsRetryOptions } from './assets-retry'\nimport { extractInfoFromUrl } from './url'\nimport {\n    retryTimesProp,\n    failedProp,\n    hookedIdentifier,\n    succeededProp,\n    doc,\n    retryIdentifier\n} from './constants'\n\nconst retryCache: { [x: string]: boolean } = {}\n\n/**\n * init synchronous retrying of assets,\n * this includes the retrying of\n * script, link and img tags\n *\n * @export\n * @param {InnerAssetsRetryOptions} opts\n */\nexport default function initSync(opts: InnerAssetsRetryOptions) {\n    const onRetry = opts.onRetry\n    const onSuccess = opts.onSuccess\n    const onFail = opts.onFail\n    const getTargetUrl = function(target: EventTarget | null) {\n        if (target instanceof HTMLScriptElement || target instanceof HTMLImageElement) {\n            return target.src\n        }\n        if (target instanceof HTMLLinkElement) {\n            return target.href\n        }\n        return null\n    }\n    /**\n     * capture error on window\n     * when js / css / image failed to load\n     * reload the target with new domain\n     *\n     * @param {ErrorEvent} event\n     * @returns\n     */\n    const errorHandler = function(event: Event) {\n        if (!event) {\n            return\n        }\n        const target = event.target || event.srcElement\n        const domainMap = opts.domain\n        const originalUrl = getTargetUrl(target)\n        if (!originalUrl) {\n            // not one of script / link / image element\n            return\n        }\n        const [currentDomain, currentCollector] = extractInfoFromUrl(originalUrl, domainMap)\n        if (!currentCollector || !currentDomain) {\n            return\n        }\n        currentCollector[retryTimesProp]++\n        currentCollector[failedProp].push(originalUrl)\n      const isFinalRetry = currentCollector[retryTimesProp] > opts.maxRetryCount\n        onFail(originalUrl, isFinalRetry)\n        if (!domainMap[currentDomain] || isFinalRetry) {\n            // can not find a domain to switch\n            // or failed too many times\n            return\n        }\n        const newDomain = domainMap[currentDomain]\n        const newUrl = stringReplace(originalUrl, currentDomain, newDomain)\n        const userModifiedUrl = onRetry(newUrl, originalUrl, currentCollector)\n        // if onRetry returns null, do not retry this url\n        if (userModifiedUrl === null) {\n            return\n        }\n        // eslint-disable-next-line\n        if (typeof userModifiedUrl !== 'string') {\n            throw new Error('a string should be returned in `onRetry` function')\n        }\n        // cache retried elements\n        const elementId = hashTarget(target);\n        if (retryCache[elementId]) {\n            return;\n        }\n        retryCache[elementId] = true;\n        const onloadCallback = () => {\n            currentCollector[succeededProp].push(userModifiedUrl)\n        }\n        if (target instanceof HTMLScriptElement && !target.getAttribute(hookedIdentifier) && target.src) {\n            loadNextScript(target, userModifiedUrl, onloadCallback)\n            return\n        }\n        if (target instanceof HTMLLinkElement && target.href) {\n            loadNextLink(target, userModifiedUrl, onloadCallback)\n            return\n        }\n        if (target instanceof HTMLImageElement && target.src) {\n            target.setAttribute(retryIdentifier, randomString())\n            target.src = userModifiedUrl\n            target.onload = onloadCallback\n        }\n    }\n\n    /**\n     * test is link element loaded in load event\n     *\n     * @param {Event} event\n     */\n    const loadHandler = function(event: Event) {\n        if (!event) {\n            return;\n        }\n        const target = event.target || event.srcElement;\n        // only handle link element\n        const isLink = target instanceof HTMLLinkElement;\n        const isScript = target instanceof HTMLScriptElement;\n        const isImg = target instanceof HTMLImageElement;\n        if (!isLink && !isScript && !isImg) {\n          return;\n        }\n        const originalUrl = getTargetUrl(target)\n        const domainMap = opts.domain\n        const [currentDomain, currentCollector] = extractInfoFromUrl(originalUrl, domainMap)\n        if (!currentCollector || !currentDomain) {\n          return\n        }\n        onSuccess(originalUrl)\n        if(!isLink){\n          return\n        }\n        const supportStyleSheets = doc.styleSheets\n        // do not support styleSheets API\n        if (!supportStyleSheets) {\n            return;\n        }\n        const styleSheets = arrayFrom(doc.styleSheets) as CSSStyleSheet[]\n        const targetStyleSheet = styleSheets.filter(styleSheet => {\n            return styleSheet.href === target.href\n        })[0]\n        const rules = getCssRules(targetStyleSheet)\n        if (rules === null) {\n            return\n        }\n        if (rules.length === 0) {\n            errorHandler(event)\n        }\n    }\n\n    doc.addEventListener('error', errorHandler, true)\n    doc.addEventListener('load', loadHandler, true)\n}\n","import { arrayFrom, stringReplace, toSlug, supportRules, getCssRules } from './util'\nimport { doc } from './constants'\nimport { getCurrentDomain, DomainMap } from './url'\nimport { InnerAssetsRetryOptions } from './assets-retry'\n\ntype UrlProperty = 'backgroundImage' | 'borderImage' | 'listStyleImage'\n// cache for <link rel=\"stylesheet\" />\nconst handledStylesheets: { [x: string]: boolean } = {}\n// cache for <style />\nconst handledStyleTags: HTMLStyleElement[] = []\n\nconst processRules = function(\n    name: UrlProperty,\n    rule: CSSStyleRule,\n    styleSheet: CSSStyleSheet,\n    styleRules: CSSStyleRule[],\n    opts: InnerAssetsRetryOptions\n) {\n    const domainMap = opts.domain\n    const onRetry = opts.onRetry\n    const targetRule = rule.style && rule.style[name]\n    if (!targetRule) {\n        return\n    }\n    // skip data-uri\n    if (/^url\\([\"']?data:/.test(targetRule)) {\n        return\n    }\n    const [_, originalUrl] = targetRule.match(/^url\\([\"']?(.+?)[\"']?\\)/) || []\n    if (!originalUrl) {\n        return\n    }\n    const currentDomain = getCurrentDomain(originalUrl, domainMap)\n    if (!currentDomain || !domainMap[currentDomain]) {\n        return\n    }\n    const urlList = Object.keys(domainMap)\n        .map(domain => {\n            const newUrl = stringReplace(originalUrl, currentDomain, domain)\n            const userModifiedUrl = onRetry(newUrl, originalUrl, null)\n            return `url(\"${userModifiedUrl}\")`\n        })\n        .join(',')\n    const cssText = rule.selectorText + `{ ${toSlug(name)}: ${urlList} !important; }`\n    try {\n        styleSheet.insertRule(cssText, styleRules.length)\n    } catch (_) {\n        styleSheet.insertRule(cssText, 0)\n    }\n}\n\nconst processStyleSheets = (styleSheets: CSSStyleSheet[], opts: InnerAssetsRetryOptions) => {\n    const urlProperties: UrlProperty[] = ['backgroundImage', 'borderImage', 'listStyleImage']\n    // TODO: iterating stylesheets may cause performance issues\n    // maybe find other approaches?\n    styleSheets.forEach((styleSheet: CSSStyleSheet) => {\n        const rules = getCssRules(styleSheet);\n        if (rules === null) {\n            return;\n        }\n        const styleRules = arrayFrom(rules) as CSSStyleRule[]\n        styleRules.forEach(rule => {\n            urlProperties.forEach(cssProperty => {\n                processRules(cssProperty, rule, styleSheet, styleRules, opts)\n            })\n        })\n\n        if (styleSheet.href) {\n            handledStylesheets[styleSheet.href] = true\n        }\n        if (styleSheet.ownerNode instanceof HTMLStyleElement) {\n            handledStyleTags.push(styleSheet.ownerNode)\n        }\n    })\n}\n\nconst getStyleSheetsToBeHandled = function(styleSheets: StyleSheetList, domainMap: DomainMap) {\n    return (arrayFrom(styleSheets) as CSSStyleSheet[]).filter(styleSheet => {\n        if (!supportRules(styleSheet)) {\n            return false;\n        }\n        // <style /> tags\n        if (!styleSheet.href) {\n            const ownerNode = styleSheet.ownerNode;\n            if (ownerNode instanceof HTMLStyleElement && handledStyleTags.indexOf(ownerNode) > -1) {\n                return false;\n            }\n            return true;\n        }\n        if (handledStylesheets[styleSheet.href]) {\n            return false;\n        }\n        const currentDomain = getCurrentDomain(styleSheet.href, domainMap);\n        return !!currentDomain\n    })\n\n}\n\nexport default function initCss(opts: InnerAssetsRetryOptions) {\n    // detect is support styleSheets\n    const supportStyleSheets = doc.styleSheets\n    const domainMap = opts.domain\n    if (!supportStyleSheets) return false\n    setInterval(() => {\n        const newStyleSheets = getStyleSheetsToBeHandled(doc.styleSheets, domainMap)\n        if (newStyleSheets.length > 0) {\n            processStyleSheets(newStyleSheets, opts)\n        }\n    }, 250)\n}\n","import initAsync from './retry-async'\nimport initSync from './retry-sync'\nimport initCss from './retry-css'\nimport { RetryStatistics, retryCollector } from './collector'\nimport { maxRetryCountProp, onRetryProp, onSuccessProp, onFailProp, domainProp, win } from './constants'\nimport { Domain, DomainMap, prepareDomainMap } from './url'\nimport { setDefault, identity } from './util'\n\nexport type RetryFunction = (\n    currentUrl: string,\n    originalUrl: string,\n    retryCollector: null | RetryStatistics\n) => string | null\n\nexport type SuccessFunction = (\n    currentUrl: string | null\n) => string | null\n\nexport type FailFunction = (\n    currentUrl: string,\n    isFinal: boolean\n) => string | null\n\nexport interface AssetsRetryOptions {\n    [maxRetryCountProp]: number\n    [onRetryProp]: RetryFunction\n    [onSuccessProp]: SuccessFunction\n    [onFailProp]: FailFunction\n    [domainProp]: Domain\n}\n\nexport interface InnerAssetsRetryOptions {\n    [maxRetryCountProp]: number\n    [onRetryProp]: RetryFunction\n    [onSuccessProp]: SuccessFunction\n    [onFailProp]: FailFunction\n    [domainProp]: DomainMap\n}\n\nexport default function init(opts: AssetsRetryOptions = {} as any) {\n    try {\n        setDefault(opts, maxRetryCountProp, 3)\n        setDefault(opts, onRetryProp, identity)\n        setDefault(opts, onSuccessProp, identity)\n        setDefault(opts, onFailProp, identity)\n        // eslint-disable-next-line\n        if (typeof opts[domainProp] !== 'object') {\n            throw new Error('opts.domain cannot be non-object.')\n        }\n        const invalidOptions = Object.keys(opts).filter(key => [maxRetryCountProp, onRetryProp, onSuccessProp, onFailProp, domainProp].indexOf(key) === -1)\n        if (invalidOptions.length > 0) {\n            throw new Error('option name: ' + invalidOptions.join(', ') + ' is not valid.')\n        }\n        const innerOpts: InnerAssetsRetryOptions = {\n            [maxRetryCountProp]: opts[maxRetryCountProp],\n            [onRetryProp]: opts[onRetryProp],\n            [onSuccessProp]: opts[onSuccessProp],\n            [onFailProp]: opts[onFailProp],\n            [domainProp]: prepareDomainMap(opts[domainProp])\n        }\n        initAsync(innerOpts)\n        initSync(innerOpts)\n        if (__RETRY_IMAGE__) {\n            initCss(innerOpts)\n        }\n        return retryCollector\n    } catch (e) {\n        win.console && console.error('[assetsRetry] error captured', e)\n    }\n}\n"],"names":["identity","x","noop","setDefault","obj","key","defaultValue","isFunctionProperty","proto","e","prepareDomainMap","domains","Array","isArray","reduce","domainMap","domain","idx","array","length","getCurrentDomain","src","Object","keys","filter","indexOf","sort","prev","next","scriptProperties","retryTimesProp","succeededProp","failedProp","maxRetryCountProp","onRetryProp","onSuccessProp","onFailProp","domainProp","innerScriptProp","innerOnerrorProp","scriptTag","hookedIdentifier","retryIdentifier","win","window","doc","document","hasOwn","prototype","hasOwnProperty","stringReplace","current","oldStr","newStr","substring","arrayFrom","arrayLike","slice","call","loadNextScript","$script","newSrc","onload","$newScript","originalNonce","retryId","newHtml","newScript","readyState","test","navigator","userAgent","createElement","HTMLScriptElement","forEach","_","onerror","setAttribute","randomString","getAttribute","getElementsByTagName","appendChild","outerHTML","replace","write","querySelector","getCssRules","styleSheet","rules","cssRules","loadNextLink","$link","newHref","$newLink","HTMLLinkElement","href","hashTarget","element","HTMLElement","nodeName","join","Math","random","toString","retryCollector","extractInfoFromUrl","url","currentDomain","srcPath","substr","_a","getProto","getPrototypeOf","__proto__","concat","collectPropertyNames","getHookedScriptDescriptors","self","opts","maxRetryCount","onRetry","descriptor","isFn","value","apply","arguments","set","newVal","event","stopPropagation","callOriginalOnError","func","thisArg","args","currentCollector","userModifiedSrc","Error","push","_called","get","hookCreateElement","originalCreateElement","name","options","$hookedScript","descriptors","defineProperties","createHookedScript","hookPrototype","target","originalFunc","map","item","this","Function","retryCache","initSync","getTargetUrl","HTMLImageElement","errorHandler","srcElement","originalUrl","isFinalRetry","onFail","newDomain","newUrl","userModifiedUrl","onloadCallback","elementId","onSuccess","addEventListener","isLink","isScript","isImg","targetStyleSheet","styleSheets","processRules","rule","styleRules","targetRule","style","match","urlList","cssText","selectorText","$1","$2","toLowerCase","insertRule","handledStylesheets","handledStyleTags","processStyleSheets","urlProperties","cssProperty","ownerNode","HTMLStyleElement","getStyleSheetsToBeHandled","supportStyleSheets","invalidOptions","innerOpts","Node","Element","setInterval","newStyleSheets","console","error"],"mappings":"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"}