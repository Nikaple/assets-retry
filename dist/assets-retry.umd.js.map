{"version":3,"file":"assets-retry.umd.js","sources":["../src/util.ts","../src/url.ts","../src/constants.ts","../src/retry-async.ts","../src/collector.ts","../src/retry-sync.ts","../src/retry-css.ts","../src/assets-retry.ts"],"sourcesContent":["import { scriptTag, linkTag, doc, retryIdentifier } from './constants'\n\nexport const identity = function<T>(x: T): T {\n    return x\n}\nexport const noop = () => {\n    /* noop */\n}\n\nexport const hasOwn = Object.prototype.hasOwnProperty\n/**\n * safely calls a function\n *\n * @template T this\n * @template R ReturnType<func>\n * @param {(this: T, ...callbackArgs: any[]) => R} func\n * @param {T} thisArg\n * @param {*} args\n * @returns {R}\n */\nexport const safeCall = function<T, R>(\n    func: (this: T, ...callbackArgs: any[]) => R,\n    thisArg: T,\n    args: any\n): R {\n    // eslint-disable-next-line\n    if (typeof func !== 'function') {\n        return null as any\n    }\n    return func.call(thisArg, args)\n}\n\n/**\n * replace a substring with new one\n *\n * @param {string} current current string\n * @param {string} oldStr substring to replace\n * @param {string} newStr new string\n * @returns\n */\nexport const stringReplace = function(current: string, oldStr: string, newStr: string) {\n    const idx = current.indexOf(oldStr)\n    if (idx === -1) {\n        return current;\n    }\n    return current.substring(0, idx) + newStr + current.substring(idx + oldStr.length)\n}\n\n/**\n * convert a camelCase string to a dash-separated string.\n *\n * @param {string} str\n * @returns\n */\nexport const toSlug = function(str: string) {\n    return str.replace(/([a-z])([A-Z])/g, (_, $1, $2) => `${$1}-${$2.toLowerCase()}`)\n}\n\n/**\n * set default value for object\n *\n * @param {any} obj object\n * @param {string} key key\n * @param {any} defaultValue default value\n */\nexport const setDefault = function(obj: any, key: string, defaultValue: any) {\n    obj[key] = obj[key] || defaultValue\n}\n\n/**\n * transform an array-like object to array\n *\n * @template T\n * @param {ArrayLike<T>} arrayLike\n * @returns {T[]}\n */\nexport const arrayFrom = function<T>(arrayLike: ArrayLike<T>): T[] {\n    return [].slice.call(arrayLike)\n}\n/**\n * collect all property names from current object to its ancestor\n *\n * @param {any} obj\n * @returns\n */\nexport const collectPropertyNames = function(obj: any) {\n    const getProto = Object.getPrototypeOf\n        ? Object.getPrototypeOf\n        : function(x: any) {\n              return x.__proto__\n          }\n    let keys = Object.keys(obj);\n    while (getProto(obj)) {\n        keys = keys.concat(Object.keys(getProto(obj)))\n        obj = getProto(obj)\n    }\n    return keys.filter(key => key !== 'constructor');\n}\n\n/**\n * @example\n * isFunctionProperty(HTMLScriptElement.prototype, 'src); // false\n * isFunctionProperty(HTMLScriptElement.prototype, 'getAttribute'); // true\n * @param {any} proto\n * @param {string} key\n * @returns\n */\nexport const isFunctionProperty = function(proto: any, key: string) {\n    try {\n        return typeof proto[key] === 'function'\n    } catch (e) {\n        // TypeError: Illegal invocation\n        // when evaluating properties like\n        // HTMLScriptElement.prototype.src\n        return false\n    }\n}\n\n/**\n * on some browsers, calling `document.write` when \n * `document.readyState` is `loading` will clear the whole\n * page, which is not what we wanted.\n *\n * @returns\n */\nexport const supportDocumentWrite = () => {\n    return !(/Edge|MSIE|rv:/i.test(navigator.userAgent))\n}\n\n/**\n * loads a new script element by previous failed script element\n *\n * @param {HTMLScriptElement} $script previous script element\n * @param {string} newSrc new url to try\n */\nexport const loadNextScript = function(\n    $script: HTMLScriptElement,\n    newSrc: string,\n    onload: () => void = noop\n) {\n    // when dealing with failed script tags in html,\n    // use `document.write` to ensure the correctness\n    // of loading order\n    if (doc.readyState === 'loading' && supportDocumentWrite()) {\n        const retryId = randomString()\n        const newHtml = $script.outerHTML\n            // delete previous retry id\n            .replace(/data-retry-id=\"[^\"]+\"/, '')\n            .replace(/src=(?:\"[^\"]+\"|.+)([ >])/, `${retryIdentifier}=${retryId} src=\"${newSrc}\"$1`)\n        doc.write(newHtml)\n        const newScript = doc.querySelector(\n            `script[${retryIdentifier}=\"${retryId}\"]`\n        ) as HTMLScriptElement\n        if (newScript) {\n            newScript.onload = onload\n        }\n        return\n    }\n    const $newScript = doc.createElement(scriptTag)\n    // copy script properties except src:\n    // type, noModule, charset, async, defer,\n    // crossOrigin, text, referrerPolicy, event,\n    // htmlFor, integrity (chrome)\n    Object.keys(HTMLScriptElement.prototype).forEach(function(key: string) {\n        if (key !== 'src' && ($script as any)[key] && typeof ($script as any)[key] !== 'object') {\n            try {\n                ;($newScript as any)[key] = ($script as any)[key]\n            } catch (_) {\n                /* noop */\n            }\n        }\n    })\n    $newScript.src = newSrc\n    $newScript.onload = $script.onload\n    $newScript.onerror = $script.onerror\n    $newScript.setAttribute(retryIdentifier, randomString())\n    // webpack nonce for csp\n    const originalNonce = $script.getAttribute('nonce')\n    if (originalNonce) {\n        $newScript.setAttribute('nonce', originalNonce)\n    }\n    doc.getElementsByTagName('head')[0].appendChild($newScript)\n}\n\n\n/**\n * get rules from styleSheet\n *\n * @param {CSSStyleSheet} styleSheet\n * @returns\n */\nexport const getCssRules = function(styleSheet: CSSStyleSheet) {\n    try {\n        return styleSheet.rules\n    } catch (_) {\n        try {\n            return styleSheet.cssRules\n        } catch (_) {\n            return null\n        }\n    }\n}\n/**\n * test if current browser support CSSRuleList\n *\n * @param {CSSStyleSheet} styleSheet\n * @returns\n */\nexport const supportRules = function(styleSheet: CSSStyleSheet) {\n    const rules = getCssRules(styleSheet)\n    return !!rules\n}\n\n/**\n * loads a new link element by previous failed link element\n *\n * @param {HTMLLinkElement} $link previous link element\n * @param {string} newHref new url to try\n */\nexport const loadNextLink = function($link: HTMLLinkElement, newHref: string, onload: () => void) {\n    const $newLink = doc.createElement(linkTag)\n    // copy link properties except href:\n    // disabled, href, crossOrigin, rel, relList, media, hreflang,\n    // type, as, referrerPolicy, sizes, imageSrcset, imageSizes,\n    // charset, rev, target, sheet, integrity, import (chrome)\n    Object.keys(HTMLLinkElement.prototype).forEach(function(key: string) {\n        if (key !== 'href' && ($link as any)[key] && typeof ($link as any)[key] !== 'object') {\n            try {\n                ;($newLink as any)[key] = ($link as any)[key]\n            } catch (_) {\n                /* noop */\n            }\n        }\n    })\n    $newLink.href = newHref\n    $newLink.onload = onload\n    $newLink.setAttribute(retryIdentifier, randomString())\n    doc.getElementsByTagName('head')[0].appendChild($newLink)\n}\n\nexport const hashTarget = function(element: EventTarget | null) {\n    if (!element) {\n        return 'null'\n    }\n    if (!(element instanceof HTMLElement)) {\n        return 'not_supported'\n    }\n    const nodeName = element.nodeName;\n    const src = (element as any).src;\n    const href = (element as any).href;\n    const dataRetryId = element.getAttribute(retryIdentifier);\n    return [nodeName, src, href, dataRetryId].join(';')\n}\n\nexport const randomString = () => Math.random().toString(36).slice(2)","import { retryCollector, RetryStatistics } from './collector'\nimport { retryTimesProp, failedProp, succeededProp } from './constants'\n\nexport type Domain = string[] | { [x: string]: string }\nexport interface DomainMap {\n    [x: string]: string\n}\n\n/**\n * generate the domain map from user\n * @example\n * generateDomainMap(['a.cdn', 'b.cdn', 'c.cdn']) // {'a.cdn': 'b.cdn', 'b.cdn': 'c.cdn', 'c.cdn': 'a.cdn'}\n *\n * @param {Domain} domains\n * @returns {DomainMap}\n */\nexport const prepareDomainMap = function(domains: Domain): DomainMap {\n    // array\n    if (Array.isArray(domains)) {\n        return domains.reduce(function(domainMap, domain, idx, array) {\n            domainMap[domain] = array[(idx + 1) % array.length]\n            return domainMap\n        }, {} as DomainMap)\n    }\n    // object\n    return domains\n}\n\n/**\n * get path from src\n * @example\n * getUrlPath('https://a.cdn/js/1.js', 'a.cdn'); // '/js/1.js'\n * getUrlPath('https://a.cdn/namespace/js/1.js', 'a.cdn/namespace'); // '/js/1.js'\n * @param {string} src script src\n * @param {string} currentDomain domain name\n * @returns {string}\n */\nexport const getUrlPath = function(src: string, currentDomain: string) {\n    return src.substr(src.indexOf(currentDomain) + currentDomain.length, src.length)\n}\n\n/**\n * find out the domain of current loading script\n *\n * @param {string} src\n * @param {{ [x: string]: string }} domainMap\n * @returns\n */\nexport const getCurrentDomain = function(src: string, domainMap: DomainMap) {\n    return (\n        Object.keys(domainMap)\n            .filter(function(domain) {\n                return src.indexOf(domain) > -1\n            })\n            // sort by length (relevance)\n            .sort((prev, next) => next.length - prev.length)[0]\n    )\n}\n\n/**\n * extract domain from url, and get the\n * corresponding statistic collector\n * @param {string} url\n * @returns\n */\nexport const extractInfoFromUrl = function(\n    url: string,\n    domainMap: DomainMap\n): [string?, RetryStatistics?] {\n    const currentDomain = getCurrentDomain(url, domainMap)\n    if (!currentDomain) {\n        return []\n    }\n    const srcPath = getUrlPath(url, currentDomain)\n    retryCollector[srcPath] = retryCollector[srcPath] || {\n        [retryTimesProp]: 0,\n        [failedProp]: [],\n        [succeededProp]: []\n    }\n    return [currentDomain, retryCollector[srcPath]]\n}\n","export const retryTimesProp = 'retryTimes'\nexport const succeededProp = 'succeeded'\nexport const failedProp = 'failed'\nexport const maxRetryCountProp = 'maxRetryCount'\nexport const onRetryProp = 'onRetry'\nexport const domainProp = 'domain'\nexport const innerScriptProp = '_$assetsRetryScript'\nexport const innerOnloadProp = '_$assetsRetryOnload'\nexport const innerOnerrorProp = '_$assetsRetryOnerror'\nexport const scriptTag = 'script'\nexport const linkTag = 'link'\nexport const hookedIdentifier = 'data-assets-retry-hooked'\nexport const retryIdentifier = 'data-retry-id'\nexport const win = window\nexport const doc = window.document\n","import {\n    collectPropertyNames,\n    stringReplace,\n    isFunctionProperty,\n    loadNextScript,\n    safeCall,\n    hasOwn,\n    noop\n} from './util'\n\nimport {\n    retryTimesProp,\n    succeededProp,\n    failedProp,\n    maxRetryCountProp,\n    onRetryProp,\n    domainProp,\n    innerScriptProp,\n    innerOnloadProp,\n    innerOnerrorProp,\n    scriptTag,\n    hookedIdentifier,\n    doc,\n} from './constants'\nimport { retryCollector } from './collector'\nimport { prepareDomainMap, extractInfoFromUrl } from './url'\nimport { InnerAssetsRetryOptions } from './assets-retry'\n\nexport interface HookedScript {\n    [innerScriptProp]: HTMLScriptElement\n    [innerOnerrorProp]: (e: Partial<Event>) => void\n    [x: string]: any\n}\n\n// cache all properties of HTMLScriptElement.prototype\n// (including prototype properties) because it's big (length > 200)\n// otherwise it would be calculated every time when\n// a script request failed.\nlet scriptProperties: string[];\ntry {\n    scriptProperties = collectPropertyNames(HTMLScriptElement.prototype)\n} catch (_) { /* noop */ }\n\n/**\n * create the descriptor of hooked script object,\n * accessing any property on the hooked script object\n * will be delegated to the real HTMLScriptElement\n * except onload/onerror events\n *\n * @param {any} self hookedScript\n * @param {object} opts\n * @returns\n */\nconst getHookedScriptDescriptors = function(self: HookedScript, opts: InnerAssetsRetryOptions) {\n    const maxRetryCount = opts[maxRetryCountProp]\n    const domainMap = prepareDomainMap(opts[domainProp])\n    const onRetry = opts[onRetryProp]\n    return scriptProperties.reduce(function(descriptor, key) {\n        const isFn = isFunctionProperty(HTMLScriptElement.prototype, key)\n        // for function properties,\n        // do not assign getters/setters\n        if (isFn) {\n            descriptor[key] = {\n                value: function() {\n                    return (self[innerScriptProp] as any)[key].apply(\n                        self[innerScriptProp],\n                        arguments\n                    )\n                }\n            }\n        } else {\n            descriptor[key] = {\n                set: function(newVal) {\n                    if (key === 'onerror') {\n                        self[innerOnerrorProp] = newVal\n                        // hook error events,\n                        // forward the original onerror handler\n                        // to the next script element to load\n                        ;(self[innerScriptProp] as any).onerror = function(event: ErrorEvent) {\n                            event.stopPropagation && event.stopPropagation()\n                            const src = self[innerScriptProp].src\n                            const [currentDomain, currentCollector] = extractInfoFromUrl(\n                                src,\n                                domainMap\n                            )\n                            if (!currentDomain || !currentCollector) {\n                                return\n                            }\n                            const newSrc = stringReplace(\n                                src,\n                                currentDomain,\n                                domainMap[currentDomain]\n                            )\n                            const userModifiedSrc = onRetry(newSrc, src, currentCollector)\n                            // if onRetry returns null, do not retry this url\n                            if (userModifiedSrc === null) {\n                                return\n                            }\n                            // eslint-disable-next-line\n                            if (typeof userModifiedSrc !== 'string') {\n                                throw new Error('a string should be returned in `onRetry` function')\n                            }\n                            if (currentCollector[retryTimesProp] <= maxRetryCount) {\n                                loadNextScript(self[innerScriptProp], userModifiedSrc)\n                            } else {\n                                safeCall(self[innerOnerrorProp], self[innerScriptProp], event)\n                            }\n                        }\n                        return\n                    }\n                    if (key === 'onload') {\n                        self[innerOnloadProp] = newVal\n                        self[innerScriptProp].onload = function(event: Event) {\n                            const src = self[innerScriptProp].src\n                            const [_, currentCollector] = extractInfoFromUrl(src, domainMap)\n                            if (!currentCollector) {\n                                return\n                            }\n                            if (currentCollector[failedProp].indexOf(src) === -1) {\n                                currentCollector[succeededProp].push(src)\n                            }\n                            if (newVal && !newVal._called) {\n                                newVal._called = true\n                                newVal.call(self[innerScriptProp], event)\n                            }\n                        }\n                        return\n                    }\n                    ;(self[innerScriptProp] as any)[key] = newVal\n                },\n                get() {\n                    return (self[innerScriptProp] as any)[key]\n                }\n            }\n        }\n        return descriptor\n    }, {} as PropertyDescriptorMap)\n}\n\nconst createHookedScript = function(\n    $script: HTMLScriptElement,\n    opts: InnerAssetsRetryOptions\n): HookedScript {\n    $script.setAttribute(hookedIdentifier, 'true')\n    const $hookedScript: HookedScript = {\n        [innerScriptProp]: $script,\n        [innerOnerrorProp]: noop\n    }\n    const descriptors = getHookedScriptDescriptors($hookedScript, opts)\n    Object.defineProperties($hookedScript, descriptors)\n    return $hookedScript\n}\n\n/**\n * hook `document.createElement`\n * @param {InnerAssetsRetryOptions} opts\n */\nconst hookCreateElement = function(opts: InnerAssetsRetryOptions) {\n    const originalCreateElement = doc.createElement\n    ;(doc as any).createElement = function(name: string, options: any): any {\n        if (name === scriptTag) {\n            return createHookedScript((originalCreateElement as any).call(doc, scriptTag), opts)\n        }\n        return originalCreateElement.call(doc, name, options)\n    }\n    doc.createElement.toString = function() {\n        return 'function createElement() { [native code] }'\n    }\n}\n\n/**\n * create a hooked function which hooks every method of target.\n * if a method is hooked and its arguments contains the inner script tag\n * it will be replaced with the value of inner script tag\n *\n * @param {any} target hook target\n */\nconst hookPrototype = function(target: any) {\n    const functionKeys = Object.keys(target).filter(key => isFunctionProperty(target, key))\n    functionKeys.forEach(key => {\n        const originalFunc = target[key]\n        target[key] = function(): any {\n            const args = [].slice.call(arguments).map((item: any) => {\n                if (!item) return item;\n                return hasOwn.call(item, innerScriptProp) ? item[innerScriptProp] : item\n            })\n            return originalFunc.apply(this, args)\n        }\n        // keep original toString\n        if (/^\\w+$/.test(key)) {\n            target[key].toString = new Function(`return 'function ${key}() { [native code] }'`)\n        }\n    })\n}\n/**\n * init asynchronous retrying of script tags\n * @param {InnerAssetsRetryOptions} opts\n * @returns\n */\nexport default function initAsync(opts: InnerAssetsRetryOptions) {\n    hookCreateElement(opts)\n    // eslint-disable-next-line\n    if (typeof Node !== 'undefined') {\n        hookPrototype(Node.prototype)\n    }\n    // eslint-disable-next-line\n    if (typeof Element !== 'undefined') {\n        hookPrototype(Element.prototype)\n    }\n    return retryCollector\n}\n","/** @description data collector */\n\nimport { retryTimesProp, succeededProp, failedProp } from './constants'\n\nexport interface RetryCollector {\n    [x: string]: RetryStatistics\n}\n\nexport interface RetryStatistics {\n    [retryTimesProp]: number\n    [succeededProp]: string[]\n    [failedProp]: string[]\n}\n\n// statistic collector\nexport const retryCollector: RetryCollector = {}\n","import { stringReplace, loadNextScript, loadNextLink, hashTarget, randomString, arrayFrom, getCssRules } from './util'\nimport { InnerAssetsRetryOptions } from './assets-retry'\nimport { extractInfoFromUrl } from './url'\nimport {\n    retryTimesProp,\n    failedProp,\n    hookedIdentifier,\n    succeededProp,\n    doc,\n    retryIdentifier\n} from './constants'\n\nconst retryCache: { [x: string]: boolean } = {}\n\n/**\n * init synchronous retrying of assets,\n * this includes the retrying of\n * script, link and img tags\n *\n * @export\n * @param {InnerAssetsRetryOptions} opts\n */\nexport default function initSync(opts: InnerAssetsRetryOptions) {\n    const onRetry = opts.onRetry\n    const getTargetUrl = function(target: EventTarget | null) {\n        if (target instanceof HTMLScriptElement || target instanceof HTMLImageElement) {\n            return target.src\n        }\n        if (target instanceof HTMLLinkElement) {\n            return target.href\n        }\n        return null\n    }\n    /**\n     * capture error on window\n     * when js / css / image failed to load\n     * reload the target with new domain\n     *\n     * @param {ErrorEvent} event\n     * @returns\n     */\n    const errorHandler = function(event: Event) {\n        if (!event) {\n            return\n        }\n        const target = event.target || event.srcElement\n        const domainMap = opts.domain\n        const originalUrl = getTargetUrl(target)\n        if (!originalUrl) {\n            // not one of script / link / image element\n            return\n        }\n        const [currentDomain, currentCollector] = extractInfoFromUrl(originalUrl, domainMap)\n        if (!currentCollector || !currentDomain) {\n            return\n        }\n        currentCollector[retryTimesProp]++\n        currentCollector[failedProp].push(originalUrl)\n        if (!domainMap[currentDomain] || currentCollector[retryTimesProp] > opts.maxRetryCount) {\n            // can not find a domain to switch\n            // or failed too many times\n            return\n        }\n        const newDomain = domainMap[currentDomain]\n        const newUrl = stringReplace(originalUrl, currentDomain, newDomain)\n        const userModifiedUrl = onRetry(newUrl, originalUrl, currentCollector)\n        // if onRetry returns null, do not retry this url\n        if (userModifiedUrl === null) {\n            return\n        }\n        // eslint-disable-next-line\n        if (typeof userModifiedUrl !== 'string') {\n            throw new Error('a string should be returned in `onRetry` function')\n        }\n        // cache retried elements\n        const elementId = hashTarget(target);\n        if (retryCache[elementId]) {\n            return;\n        }\n        retryCache[elementId] = true;\n        const onloadCallback = () => {\n            currentCollector[succeededProp].push(userModifiedUrl)\n        }\n        if (target instanceof HTMLScriptElement && !target.getAttribute(hookedIdentifier) && target.src) {\n            loadNextScript(target, userModifiedUrl, onloadCallback)\n            return\n        }\n        if (target instanceof HTMLLinkElement && target.href) {\n            loadNextLink(target, userModifiedUrl, onloadCallback)\n            return\n        }\n        if (target instanceof HTMLImageElement && target.src) {\n            target.setAttribute(retryIdentifier, randomString())\n            target.src = userModifiedUrl\n            target.onload = onloadCallback\n        }\n    }\n\n    /**\n     * test is link element loaded in load event\n     *\n     * @param {Event} event\n     */\n    const loadHandler = function(event: Event) {\n        if (!event) {\n            return;\n        }\n        const target = event.target || event.srcElement;\n        // only handle link element\n        if (!(target instanceof HTMLLinkElement)) {\n            return;\n        }\n        const supportStyleSheets = doc.styleSheets\n        // do not support styleSheets API\n        if (!supportStyleSheets) {\n            return;\n        }\n        const styleSheets = arrayFrom(doc.styleSheets) as CSSStyleSheet[]\n        const targetStyleSheet = styleSheets.filter(styleSheet => {\n            return styleSheet.href === target.href\n        })[0]\n        const rules = getCssRules(targetStyleSheet)\n        if (rules === null) {\n            return\n        }\n        if (rules.length === 0) {\n            errorHandler(event)\n        }\n    }\n\n    doc.addEventListener('error', errorHandler, true)\n    doc.addEventListener('load', loadHandler, true)\n}\n","import { arrayFrom, stringReplace, toSlug, supportRules, getCssRules } from './util'\nimport { doc } from './constants'\nimport { getCurrentDomain, DomainMap } from './url'\nimport { InnerAssetsRetryOptions } from './assets-retry'\n\ntype UrlProperty = 'backgroundImage' | 'borderImage' | 'listStyleImage'\n// cache for <link rel=\"stylesheet\" />\nconst handledStylesheets: { [x: string]: boolean } = {}\n// cache for <style />\nconst handledStyleTags: HTMLStyleElement[] = []\n\nconst processRules = function(\n    name: UrlProperty,\n    rule: CSSStyleRule,\n    styleSheet: CSSStyleSheet,\n    styleRules: CSSStyleRule[],\n    opts: InnerAssetsRetryOptions\n) {\n    const domainMap = opts.domain\n    const onRetry = opts.onRetry\n    const targetRule = rule.style && rule.style[name]\n    if (!targetRule) {\n        return\n    }\n    // skip data-uri\n    if (/^url\\([\"']?data:/.test(targetRule)) {\n        return\n    }\n    const [_, originalUrl] = targetRule.match(/^url\\([\"']?(.+?)[\"']?\\)/) || []\n    if (!originalUrl) {\n        return\n    }\n    const currentDomain = getCurrentDomain(originalUrl, domainMap)\n    if (!currentDomain || !domainMap[currentDomain]) {\n        return\n    }\n    const urlList = Object.keys(domainMap)\n        .map(domain => {\n            const newUrl = stringReplace(originalUrl, currentDomain, domain)\n            const userModifiedUrl = onRetry(newUrl, originalUrl, null)\n            return `url(\"${userModifiedUrl}\")`\n        })\n        .join(',')\n    const cssText = rule.selectorText + `{ ${toSlug(name)}: ${urlList} !important; }`\n    try {\n        styleSheet.insertRule(cssText, styleRules.length)\n    } catch (_) {\n        styleSheet.insertRule(cssText, 0)\n    }\n}\n\nconst processStyleSheets = (styleSheets: CSSStyleSheet[], opts: InnerAssetsRetryOptions) => {\n    const urlProperties: UrlProperty[] = ['backgroundImage', 'borderImage', 'listStyleImage']\n    // TODO: iterating stylesheets may cause performance issues\n    // maybe find other approaches?\n    styleSheets.forEach((styleSheet: CSSStyleSheet) => {\n        const rules = getCssRules(styleSheet);\n        if (rules === null) {\n            return;\n        }\n        const styleRules = arrayFrom(rules) as CSSStyleRule[]\n        styleRules.forEach(rule => {\n            urlProperties.forEach(cssProperty => {\n                processRules(cssProperty, rule, styleSheet, styleRules, opts)\n            })\n        })\n\n        if (styleSheet.href) {\n            handledStylesheets[styleSheet.href] = true\n        }\n        if (styleSheet.ownerNode instanceof HTMLStyleElement) {\n            handledStyleTags.push(styleSheet.ownerNode)\n        }\n    })\n}\n\nconst getStyleSheetsToBeHandled = function(styleSheets: StyleSheetList, domainMap: DomainMap) {\n    return (arrayFrom(styleSheets) as CSSStyleSheet[]).filter(styleSheet => {\n        if (!supportRules(styleSheet)) {\n            return false;\n        }\n        // <style /> tags\n        if (!styleSheet.href) {\n            const ownerNode = styleSheet.ownerNode;\n            if (ownerNode instanceof HTMLStyleElement && handledStyleTags.indexOf(ownerNode) > -1) {\n                return false;\n            }\n            return true;\n        }\n        if (handledStylesheets[styleSheet.href]) {\n            return false;\n        }\n        const currentDomain = getCurrentDomain(styleSheet.href, domainMap);\n        return !!currentDomain\n    })\n\n}\n\nexport default function initCss(opts: InnerAssetsRetryOptions) {\n    // detect is support styleSheets\n    const supportStyleSheets = doc.styleSheets\n    const domainMap = opts.domain\n    if (!supportStyleSheets) return false\n    setInterval(() => {\n        const newStyleSheets = getStyleSheetsToBeHandled(doc.styleSheets, domainMap)\n        if (newStyleSheets.length > 0) {\n            processStyleSheets(newStyleSheets, opts)\n        }\n    }, 250)\n}\n","import initAsync from './retry-async'\nimport initSync from './retry-sync'\nimport initCss from './retry-css'\nimport { RetryStatistics, retryCollector } from './collector'\nimport { maxRetryCountProp, onRetryProp, domainProp, win } from './constants'\nimport { Domain, DomainMap, prepareDomainMap } from './url'\nimport { setDefault, identity } from './util'\n\nexport type RetryFunction = (\n    currentUrl: string,\n    originalUrl: string,\n    retryCollector: null | RetryStatistics\n) => string | null\n\nexport interface AssetsRetryOptions {\n    [maxRetryCountProp]: number\n    [onRetryProp]: RetryFunction\n    [domainProp]: Domain\n}\n\nexport interface InnerAssetsRetryOptions {\n    [maxRetryCountProp]: number\n    [onRetryProp]: RetryFunction\n    [domainProp]: DomainMap\n}\n\nexport default function init(opts: AssetsRetryOptions = {} as any) {\n    try {\n        setDefault(opts, maxRetryCountProp, 3)\n        setDefault(opts, onRetryProp, identity)\n        // eslint-disable-next-line\n        if (typeof opts[domainProp] !== 'object') {\n            throw new Error('opts.domain cannot be non-object.')\n        }\n        const invalidOptions = Object.keys(opts).filter(key => [maxRetryCountProp, onRetryProp, domainProp].indexOf(key) === -1)\n        if (invalidOptions.length > 0) {\n            throw new Error('option name: ' + invalidOptions.join(', ') + ' is not valid.')\n        }\n        const innerOpts: InnerAssetsRetryOptions = {\n            [maxRetryCountProp]: opts[maxRetryCountProp],\n            [onRetryProp]: opts[onRetryProp],\n            [domainProp]: prepareDomainMap(opts[domainProp])\n        }\n        initAsync(innerOpts)\n        initSync(innerOpts)\n        if (__RETRY_IMAGE__) {\n            initCss(innerOpts)\n        }\n        return retryCollector\n    } catch (e) {\n        win.console && console.error('[assetsRetry] error captured', e)\n    }\n}\n"],"names":["identity","x","noop","setDefault","obj","key","defaultValue","isFunctionProperty","proto","e","prepareDomainMap","domains","Array","isArray","reduce","domainMap","domain","idx","array","length","getCurrentDomain","src","Object","keys","filter","indexOf","sort","prev","next","scriptProperties","retryTimesProp","succeededProp","failedProp","maxRetryCountProp","onRetryProp","domainProp","innerScriptProp","innerOnerrorProp","scriptTag","hookedIdentifier","retryIdentifier","win","window","doc","document","hasOwn","prototype","hasOwnProperty","stringReplace","current","oldStr","newStr","substring","arrayFrom","arrayLike","slice","call","loadNextScript","$script","newSrc","onload","readyState","test","navigator","userAgent","$newScript","createElement","HTMLScriptElement","forEach","_","onerror","setAttribute","randomString","originalNonce","getAttribute","getElementsByTagName","appendChild","retryId","newHtml","outerHTML","replace","write","newScript","querySelector","getCssRules","styleSheet","rules","cssRules","loadNextLink","$link","newHref","$newLink","HTMLLinkElement","href","hashTarget","element","HTMLElement","nodeName","join","Math","random","toString","retryCollector","extractInfoFromUrl","url","currentDomain","srcPath","substr","_a","getProto","getPrototypeOf","__proto__","concat","collectPropertyNames","getHookedScriptDescriptors","self","opts","maxRetryCount","onRetry","descriptor","isFn","value","apply","arguments","set","newVal","event","stopPropagation","currentCollector","userModifiedSrc","Error","func","thisArg","args","push","_called","get","hookCreateElement","originalCreateElement","name","options","$hookedScript","descriptors","defineProperties","createHookedScript","hookPrototype","target","originalFunc","map","item","this","Function","retryCache","initSync","errorHandler","srcElement","originalUrl","HTMLImageElement","newDomain","newUrl","userModifiedUrl","elementId","onloadCallback","addEventListener","styleSheets","targetStyleSheet","processRules","rule","styleRules","targetRule","style","urlList","cssText","selectorText","$1","$2","toLowerCase","insertRule","handledStylesheets","handledStyleTags","processStyleSheets","urlProperties","cssProperty","ownerNode","HTMLStyleElement","getStyleSheetsToBeHandled","invalidOptions","innerOpts","Node","Element","supportStyleSheets","setInterval","newStyleSheets","initCss","console","error"],"mappings":"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"}